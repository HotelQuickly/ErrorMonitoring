services:
	connectionPool: HQ\ConnectionPool(%productionMode%, %database%, Nette\Database\Reflection\DiscoveredReflection(), Nette\Caching\Storages\FileStorage(%appDir%/../temp/cache/))
	database: @connectionPool::getConnection()
	databaseReplica: @connectionPool::getConnection("replica")
	routerFactory: HQ\RouterFactory(%secureRoutes%)
	router: @routerFactory::createRouter
	authenticator: Authenticator
	logCron: HQ\LogCron(%cron%, %productionMode%, ... )
	exceptionService: HQ\ExceptionService(%appDir%, ...)
	translator: HQ\DbTranslator(Nette\Caching\Cache(@cacheStorage), ...)
	logger: HQ\Logger
	dbChangelog:
		class: ChangelogModule\DbChangelog
		arguments: [@database, @database::table(changelog), %appDir%]
	errorMessageService: HQ\Api\ErrorMessageService
	requestFactory:
		class: HQ\Api\RequestFactory(%apiTargetHosts%)
		setup:
			- setApplicationCode(%applicationCode%)
	s3Proxy: HQ\Aws\S3Proxy(%aws%)
	s3DataSource: HQ\ErrorMonitorinq\Datasource\S3DataSource(%tempDir%, ...)
	importService: HQ\ErrorMonitorinq\ImportService(%tempDir%, ...)
	exceptionParser: HQ\ErrorMonitoring\Nette\ExceptionParser